// 'use client'
// import { useRef, useState, useEffect } from 'react'
// import { Button } from '@/components/ui/button'
// import { Download } from 'lucide-react'
// import { jsPDF } from 'jspdf'
// import { AnalyticsBarChart, RatingsLineChart } from './AnalyticsChart'

// export function DownloadButton({ data, userEmail }) {
//   const [isGenerating, setIsGenerating] = useState(false)
//   const reportRef = useRef(null)
//   const [isMounted, setIsMounted] = useState(false)

//   useEffect(() => {
//     setIsMounted(true)
//   }, [])

//   const handleDownloadPDF = async () => {
//     if (!isMounted) return

//     setIsGenerating(true)
//     try {
//       // Delay to ensure charts and user data are fully rendered
//       await new Promise(resolve => setTimeout(resolve, 1000))

//       const { default: html2canvas } = await import('html2canvas')
//       const element = reportRef.current

//       const canvas = await html2canvas(element, {
//         scale: 3,
//         useCORS: true,
//         logging: false,
//         backgroundColor: '#ffffff',
//         onclone: (clonedDoc) => {
//           clonedDoc.querySelectorAll('.chart-container').forEach(el => {
//             el.style.width = '600px'
//             el.style.height = '300px'
//           })
//         }
//       })

//       const imgData = canvas.toDataURL('image/png')
//       const pdf = new jsPDF('p', 'mm', 'a4')
//       const pdfWidth = pdf.internal.pageSize.getWidth()
//       const pdfHeight = pdf.internal.pageSize.getHeight()

//       // Set border styling
//       pdf.setLineWidth(0.5)
//       pdf.setDrawColor(100) // Dark gray border

//       // Helper to add border and footer to each page
//       const addPageDecorations = () => {
//         // Draw a border with a 5mm margin from each edge
//         pdf.rect(5, 5, pdfWidth - 10, pdfHeight - 10)
//         // Add footer text
//         pdf.setFontSize(10)
//         pdf.setTextColor(150)
//         pdf.text(
//           'Generated by AI-Interview-Mastery',
//           pdfWidth / 2,
//           pdfHeight - 10,
//           { align: 'center' }
//         )
//       }

//       const imgProps = pdf.getImageProperties(imgData)
//       const pdfImgWidth = pdfWidth
//       const pdfImgHeight = (imgProps.height * pdfImgWidth) / imgProps.width

//       let position = 0
//       pdf.addImage(imgData, 'PNG', 0, position, pdfImgWidth, pdfImgHeight)
//       addPageDecorations()

//       // Handle multi-page PDF if the image height exceeds one page
//       if (pdfImgHeight > pdfHeight) {
//         let heightLeft = pdfImgHeight - pdfHeight
//         while (heightLeft > 0) {
//           position = heightLeft - pdfImgHeight
//           pdf.addPage()
//           pdf.addImage(imgData, 'PNG', 0, position, pdfImgWidth, pdfImgHeight)
//           addPageDecorations()
//           heightLeft -= pdfHeight
//         }
//       }

//       pdf.save(`Interview_Analytics_${userEmail}_${new Date().toISOString().split('T')[0]}.pdf`)
//     } catch (error) {
//       console.error('PDF generation failed:', error)
//     } finally {
//       setIsGenerating(false)
//     }
//   }

//   // ChartSection component for rendering charts in the PDF report
//   function ChartSection({ title, data, type }) {
//     if (!data || data.length === 0) {
//       return (
//         <div className="mb-8">
//           <h2 className="text-xl font-semibold mb-4">{title}</h2>
//           <p className="text-gray-500">No data available</p>
//         </div>
//       )
//     }

//     return (
//       <div>
//         <h2 className="text-xl font-semibold mb-8">{title}</h2>
//         <div className="chart-container" style={{ width: '350px', height: '300px' }}>
//           {type === 'bar' ? (
//             <AnalyticsBarChart data={data} pdfMode={true} />
//           ) : (
//             <RatingsLineChart data={data} pdfMode={true} />
//           )}
//         </div>
//       </div>
//     )
//   }

//   return (
//     <>
//       <Button
//         onClick={handleDownloadPDF}
//         variant="outline"
//         className="gap-2"
//         disabled={isGenerating}
//       >
//         <Download size={16} />
//         {isGenerating ? 'Generating...' : 'Download Report'}
//       </Button>

//       {/* Hidden div for PDF generation */}
//       <div className="fixed -left-[10000px] top-0">
//         <div ref={reportRef} className="p-6 bg-white" style={{ width: '210mm' }}>
//           {/* Enhanced Title Section */}
//           <div className="text-center mb-6">
//             <h1
//               className="text-3xl font-bold mb-2"
//               style={{ color: '#e53e3e', letterSpacing: '0.05em' }}
//             >
//               Interview Analytics Report
//             </h1>
//             <div className="border-b-2 border-red-200 py-2">
//               <p className="text-sm text-gray-600 font-medium">
//                 Comprehensive Performance Analysis
//               </p>
//             </div>
//           </div>

//           <p className="text-gray-600 mb-1 text-left">
//             Generated on{' '}
//             {new Date().toLocaleDateString('en-US', {
//               year: 'numeric',
//               month: 'long',
//               day: 'numeric'
//             })}
//           </p>
//           <p className="text-gray-600 mb-6 text-left font-medium">
//             User: <span className="text-blue-600">{userEmail}</span>
//           </p>

//           {/* Enhanced Stats Section */}
//           <div className="grid grid-cols-3 gap-4 mb-8">
//             {[
//               { title: '📋 Total Interviews', value: data.totalInterviews },
//               { title: '⭐ Average Rating', value: data.averageRating ? `${data.averageRating}/10` : 'N/A' },
//               { title: '🗓️ Active Months', value: data.chartData.filter(m => m.value > 0).length }
//             ].map((stat, index) => (
//               <div
//                 key={index}
//                 className="border p-4 rounded-lg bg-gradient-to-b from-gray-50 to-white shadow-sm"
//               >
//                 <h3 className="font-medium text-gray-600 text-sm">{stat.title}</h3>
//                 <p className="text-2xl font-bold mt-2 text-gray-800">
//                   {stat.value}
//                 </p>
//               </div>
//             ))}
//           </div>

//           {/* Charts Section */}
//           <div className="grid grid-cols-2 gap-4 mb-4">
//             <ChartSection
//               title="📈 Interview History (Last 6 Months)"
//               data={data.chartData}
//               type="bar"
//             />
//             <ChartSection
//               title="🌟 Interview Ratings Timeline"
//               data={data.ratingsChartData}
//               type="line"
//             />
//           </div>

//           {/* Recent Interviews */}
//           {data.recentInterviews.length > 0 && (
//             <div className="mt-2">
//               <h2 className="text-xl font-semibold mb-8">🕒Recent Interviews</h2>
//               <ul className="space-y-2">
//                 {data.recentInterviews.map((interview) => (
//                   <li key={interview.mockId} className="border-b pb-2">
//                     <p className="font-medium">{interview.jobPosition}</p>
//                     <p className="text-sm text-gray-600">
//                       {interview.jobExperience} years experience • {interview.createdAt}
//                     </p>
//                   </li>
//                 ))}
//               </ul>
//             </div>
//           )}
//         </div>
//       </div>
//     </>
//   )
// }

// function StatCard({ title, value }) {
//   return (
//     <div className="border p-4 rounded-lg">
//       <h3 className="font-medium">{title}</h3>
//       <p className="text-2xl font-bold mt-2">{value}</p>
//     </div>
//   )
// }

'use client'
import { useRef, useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Download } from 'lucide-react'
import { jsPDF } from 'jspdf'
import { AnalyticsBarChart, RatingsLineChart } from './AnalyticsChart'

export function DownloadButton({ data, userEmail }) {
  const [isGenerating, setIsGenerating] = useState(false)
  const reportRef = useRef(null)
  const [isMounted, setIsMounted] = useState(false)

  useEffect(() => {
    setIsMounted(true)
  }, [])

  const handleDownloadPDF = async () => {
    if (!isMounted) return

    setIsGenerating(true)
    try {
      // Delay to ensure charts and user data are fully rendered
      await new Promise(resolve => setTimeout(resolve, 1000))

      const { default: html2canvas } = await import('html2canvas')
      const element = reportRef.current

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff',
        onclone: (clonedDoc) => {
          clonedDoc.querySelectorAll('.chart-container').forEach(el => {
            el.style.width = '600px'
            el.style.height = '300px'
          })
        }
      })

      const imgData = canvas.toDataURL('image/png')
      const pdf = new jsPDF('p', 'mm', 'a4')
      const pdfWidth = pdf.internal.pageSize.getWidth()
      const pdfHeight = pdf.internal.pageSize.getHeight()

      // Set border styling
      pdf.setLineWidth(0.5)
      pdf.setDrawColor(100) // Dark gray border

      // Helper to add border and footer to each page
      const addPageDecorations = () => {
        // Draw a border with a 5mm margin from each edge
        pdf.rect(5, 5, pdfWidth - 10, pdfHeight - 10)
        // Add footer text
        pdf.setFontSize(10)
        pdf.setTextColor(150)
        pdf.text(
          'Generated by AI-Interview-Mastery',
          pdfWidth / 2,
          pdfHeight - 10,
          { align: 'center' }
        )
      }

      const imgProps = pdf.getImageProperties(imgData)
      const pdfImgWidth = pdfWidth
      const pdfImgHeight = (imgProps.height * pdfImgWidth) / imgProps.width

      let position = 0
      pdf.addImage(imgData, 'PNG', 0, position, pdfImgWidth, pdfImgHeight, undefined, 'FAST')
      addPageDecorations()

      // Handle multi-page PDF if the image height exceeds one page
      if (pdfImgHeight > pdfHeight) {
        let heightLeft = pdfImgHeight - pdfHeight
        while (heightLeft > 0) {
          position = heightLeft - pdfImgHeight
          pdf.addPage()
          pdf.addImage(imgData, 'PNG', 0, position, pdfImgWidth, pdfImgHeight)
          addPageDecorations()
          heightLeft -= pdfHeight
        }
      }

      pdf.save(`Interview_Analytics_${userEmail}_${new Date().toISOString().split('T')[0]}.pdf`)
    } catch (error) {
      console.error('PDF generation failed:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  // ChartSection component for rendering charts in the PDF report
  function ChartSection({ title, data, type }) {
    if (!data || data.length === 0) {
      return (
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">{title}</h2>
          <p className="text-gray-500">No data available</p>
        </div>
      )
    }

    return (
      <div>
        <h2 className="text-xl font-semibold mb-8">{title}</h2>
        <div className="chart-container" style={{ width: '350px', height: '300px' }}>
          {type === 'bar' ? (
            <AnalyticsBarChart data={data} pdfMode={true} />
          ) : (
            <RatingsLineChart data={data} pdfMode={true} />
          )}
        </div>
      </div>
    )
  }

  return (
    <>
      <Button
        onClick={handleDownloadPDF}
        variant="outline"
        className="gap-2"
        disabled={isGenerating}
      >
        <Download size={16} />
        {isGenerating ? 'Generating...' : 'Download Report'}
      </Button>

      {/* Hidden div for PDF generation */}
      <div className="fixed -left-[10000px] top-0">
        <div ref={reportRef} className="p-6 bg-white" style={{ width: '210mm' }}>
          {/* Enhanced Title Section */}
          <div className="text-center mb-6">
            <h1
              className="text-3xl font-bold mb-2"
              style={{ color: '#e53e3e', letterSpacing: '0.05em' }}
            >
              Interview Analytics Report
            </h1>
            <div className="border-b-2 border-red-200 py-2">
              <p className="text-sm text-gray-600 font-medium">
                Comprehensive Performance Analysis
              </p>
            </div>
          </div>

          <p className="text-gray-600 mb-1 text-left">
            Generated on{' '}
            {new Date().toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </p>
          <p className="text-gray-600 mb-6 text-left font-medium">
            User: <span className="text-blue-600">{userEmail}</span>
          </p>

          {/* Enhanced Stats Section */}
          <div className="grid grid-cols-3 gap-4 mb-8">
            {[
              { title: '📋 Total Interviews', value: data.totalInterviews },
              { title: '⭐ Average Rating', value: data.averageRating ? `${data.averageRating}/10` : 'N/A' },
              { title: '🗓️ Active Months', value: data.chartData.filter(m => m.value > 0).length }
            ].map((stat, index) => (
              <div
                key={index}
                className="border p-4 rounded-lg bg-gradient-to-b from-gray-50 to-white shadow-sm"
              >
                <h3 className="font-medium text-gray-600 text-sm">{stat.title}</h3>
                <p className="text-2xl font-bold mt-2 text-gray-800">
                  {stat.value}
                </p>
              </div>
            ))}
          </div>

          {/* Charts Section */}
          <div className="grid grid-cols-2 gap-4 mb-4">
            <ChartSection
              title="📈 Interview History (Last 6 Months)"
              data={data.chartData}
              type="bar"
            />
            <ChartSection
              title="🌟 Interview Ratings Timeline"
              data={data.ratingsChartData}
              type="line"
            />
          </div>

          {/* Recent Interviews */}
          {data.recentInterviews.length > 0 && (
            <div className="mt-2">
              <h2 className="text-xl font-semibold mb-8">🕒Recent Interviews</h2>
              <ul className="space-y-2">
                {data.recentInterviews.map((interview) => (
                  <li key={interview.mockId} className="border-b pb-2">
                    <p className="font-medium">{interview.jobPosition}</p>
                    <p className="text-sm text-gray-600">
                      {interview.jobExperience} years experience • {interview.createdAt}
                    </p>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </>
  )
}

function StatCard({ title, value }) {
  return (
    <div className="border p-4 rounded-lg">
      <h3 className="font-medium">{title}</h3>
      <p className="text-2xl font-bold mt-2">{value}</p>
    </div>
  )
}
